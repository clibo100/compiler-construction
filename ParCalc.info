-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from ParCalc.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp -> Exp                                 (0)
	%start_pExp1 -> Exp1                               (1)
	Integer -> L_integ                                 (2)
	Exp -> Exp '+' Exp1                                (3)
	Exp -> Exp1                                        (4)
	Exp1 -> Exp1 '*' Integer                           (5)
	Exp1 -> Integer                                    (6)
	Exp1 -> '(' Exp ')'                                (7)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp     rule  0
	%start_pExp1    rule  1
	Integer         rule  2
	Exp             rules 3, 4
	Exp1            rules 5, 6, 7

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 6
	L_integ        shift, and enter state 3

	Integer        goto state 4
	Exp            goto state 7
	Exp1           goto state 8

State 1


	'('            shift, and enter state 6
	L_integ        shift, and enter state 3

	Integer        goto state 4
	Exp1           goto state 5

State 2


	L_integ        shift, and enter state 3


State 3

	Integer -> L_integ .                                (rule 2)

	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	%eof           reduce using rule 2


State 4

	Exp1 -> Integer .                                   (rule 6)

	')'            reduce using rule 6
	'*'            reduce using rule 6
	'+'            reduce using rule 6
	%eof           reduce using rule 6


State 5

	%start_pExp1 -> Exp1 .                              (rule 1)
	Exp1 -> Exp1 . '*' Integer                          (rule 5)

	'*'            shift, and enter state 9
	%eof           accept


State 6

	Exp1 -> '(' . Exp ')'                               (rule 7)

	'('            shift, and enter state 6
	L_integ        shift, and enter state 3

	Integer        goto state 4
	Exp            goto state 11
	Exp1           goto state 8

State 7

	%start_pExp -> Exp .                                (rule 0)
	Exp -> Exp . '+' Exp1                               (rule 3)

	'+'            shift, and enter state 10
	%eof           accept


State 8

	Exp -> Exp1 .                                       (rule 4)
	Exp1 -> Exp1 . '*' Integer                          (rule 5)

	')'            reduce using rule 4
	'*'            shift, and enter state 9
	'+'            reduce using rule 4
	%eof           reduce using rule 4


State 9

	Exp1 -> Exp1 '*' . Integer                          (rule 5)

	L_integ        shift, and enter state 3

	Integer        goto state 14

State 10

	Exp -> Exp '+' . Exp1                               (rule 3)

	'('            shift, and enter state 6
	L_integ        shift, and enter state 3

	Integer        goto state 4
	Exp1           goto state 13

State 11

	Exp -> Exp . '+' Exp1                               (rule 3)
	Exp1 -> '(' Exp . ')'                               (rule 7)

	')'            shift, and enter state 12
	'+'            shift, and enter state 10


State 12

	Exp1 -> '(' Exp ')' .                               (rule 7)

	')'            reduce using rule 7
	'*'            reduce using rule 7
	'+'            reduce using rule 7
	%eof           reduce using rule 7


State 13

	Exp -> Exp '+' Exp1 .                               (rule 3)
	Exp1 -> Exp1 . '*' Integer                          (rule 5)

	')'            reduce using rule 3
	'*'            shift, and enter state 9
	'+'            reduce using rule 3
	%eof           reduce using rule 3


State 14

	Exp1 -> Exp1 '*' Integer .                          (rule 5)

	')'            reduce using rule 5
	'*'            reduce using rule 5
	'+'            reduce using rule 5
	%eof           reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 8
Number of terminals: 5
Number of non-terminals: 5
Number of states: 15
